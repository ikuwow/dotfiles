#!/usr/bin/env bash

prompt_aws() {
  if [[ -n "${AWS_PROFILE}" ]]; then
    AWS_PROMPT=" <AWS:${AWS_PROFILE}>"
  else
    AWS_PROMPT=""
  fi
}

prompt_gc() {
  if [[ -n "${GC_ACTIVE_CONFIG}" && "${GC_ACTIVE_CONFIG}" != "none" ]]; then
    GC_PROMPT=" <GC:${GC_ACTIVE_CONFIG}>"
  else
    GC_PROMPT=""
  fi
}

prompts() {
  if [ -z "$SSH_CLIENT" ]; then
    PS1='localhost: \W\$ '
  fi

  export PROMPT_COMMAND="prompt_aws;prompt_gc;$PROMPT_COMMAND"

  if [ "$(command -v __git_ps1)" ]; then
    # shellcheck disable=2016
    PS1="$(echo "${PS1}" | sed 's/\\\$ /$(__git_ps1)\\\$ /')"
  fi

  PS1="$(echo "${PS1}" | sed 's/\\\$ /$AWS_PROMPT\\\$ /')"
  PS1="$(echo "${PS1}" | sed 's/\\\$ /$GC_PROMPT\\\$ /')"

  # Make dollar yellow
  PS1="$(echo "${PS1}" | sed 's/\\\$ /\\\[\\e\[33m\\\]\\\$\\\[\\e\[0m\\\] /')"

  if [ -n "$SSH_CLIENT" ]; then
    if [ "$PS1" = "${PS1/ssh/}" ]; then
      PS1='\[\e[33m\][ssh]\[\e[0m\]'"${PS1}"
    fi
  fi
}

if [ "$(command -v networksetup)" ]; then
  wifireset() {
    interface='en0'
    networksetup -setairportpower "$interface" off
    echo 'Re-enabling Wi-Fi...'
    networksetup -setairportpower "$interface" on
    echo 'Done.'
  }
fi

if [ ! "$(command -v trash)" ]; then
  trash () {
    # shellcheck disable=2016
    echo 'Warning: `trash` is redirected to `rm`.'
    rm "$@"
  }
fi

if [ "$(command -v ghq)" ] && [ "$(command -v fzf)" ]; then
  ghqp() {
    query="$1"
    if [ -n "$query" ]; then
      repo=$(ghq list | fzf --filter "$query" | head -n 1)
    else
      repo=$(ghq list | fzf --height=30%)
    fi

    if [ -z "$repo" ]; then
      echo "No repos are selected."
      return
    fi
    echo "Changing directory to $(ghq root)/$repo"
    cd "$(ghq root)/$repo" || return 1
  }
fi

# AWS Profile Switcher
if [ ! "$(command -v aps)" ]; then

  aps() {
    if [ ! "$(command -v fzf)" ]; then
      echo "Error: ${FUNCNAME} requires fzf executable."
      exit 1
    fi
    query="$1"

    if [ "$query" = "--clear" ]; then
      export AWS_PROFILE=""
      rm -f ~/.aws/current_profile
      echo "AWS Profile cleared."
      return
    fi

    if [ -n "$query" ]; then
      profile="$(sed -n "s/^\[profile \(.*\)\]$/\1/p" < ~/.aws/config | fzf --filter "$query" | head -n 1)"
    else
      profile="$(sed -n "s/^\[profile \(.*\)\]$/\1/p" < ~/.aws/config | fzf)"
    fi

    if [ -z "$profile" ]; then
      echo "No profiles are selected."
      return
    fi

    echo "$profile" > ~/.aws/current_profile
    export AWS_PROFILE="$profile"
    echo "AWS Profile set: $profile"

    SSO_ACCOUNT_ID="$(aws configure get sso_account_id)"
    if [ -n "$SSO_ACCOUNT_ID" ]; then
      echo "SSO detected. Checking SSO session..."
      SSO_ACCOUNT="$(aws sts get-caller-identity --query "Account")"
      if [ ${#SSO_ACCOUNT} != 14 ]; then
        aws sso login
      fi
    fi
  }
fi

if [ ! "$(command -v gps)" ]; then
  gps() {
    if [ ! "$(command -v fzf)" ]; then
      echo "Error: ${FUNCNAME} requires fzf executable."
      exit 1
    fi
    query="$1"

    DUMMY_CONFIG_NAME="none"
    if [ ! "$(gcloud config configurations list --format='value(name)' | grep "^${DUMMY_CONFIG_NAME}$")" ]; then
      gcloud config configurations create "$DUMMY_CONFIG_NAME"
    fi

    if [ "$query" = "--clear" ]; then
      export GC_ACTIVE_CONFIG="$DUMMY_CONFIG_NAME"
      gcloud config configurations activate "$DUMMY_CONFIG_NAME"
      echo "Google Cloud configuration cleared."
      return
    fi

    config=""
    if [ -n "$query" ]; then
      config="$(gcloud config configurations list --format='value(name)' | grep -v "^${DUMMY_CONFIG_NAME}$" | fzf --filter "$query" | head -n 1)"
    else
      config="$(gcloud config configurations list --format='value(name)' | grep -v "^${DUMMY_CONFIG_NAME}$" | fzf)"
    fi

    if [ -z "$config" ]; then
      echo "No profiles are selected."
      return
    fi

    gcloud config configurations activate "$config"
    export GC_ACTIVE_CONFIG="$(cat ~/.config/gcloud/active_config)"
    echo "Google Cloud config set: $config"
  }
fi


kubecurl() {
  kubectl run -it --rm "ikuwow-curl-$(date "+%s")" --namespace default --image curlimages/curl sh
}

eksukc() {
  cluster="$1"
  aws eks update-kubeconfig --name "$cluster" --alias "$cluster"
}

flushdns() {
  # Check if dscacheutil exists (macOS only)
  if ! command -v dscacheutil &>/dev/null; then
    echo "Error: This command is for macOS only. dscacheutil not found."
    return 1
  fi

  if ! pgrep mDNSResponder &>/dev/null; then
    echo "Error: mDNSResponder is not running. This command requires macOS."
    return 1
  fi

  echo "Flushing DNS cache..."

  # Flush DNS cache
  if sudo dscacheutil -flushcache; then
    echo "dscacheutil: Cache cleared successfully"
  else
    echo "Error: Failed to clear cache with dscacheutil"
    return 1
  fi

  # Restart mDNSResponder
  if sudo killall -HUP mDNSResponder; then
    echo "mDNSResponder: Restarted successfully"
  else
    echo "Error: Failed to restart mDNSResponder"
    return 1
  fi

  echo "DNS cache flush completed."
}
